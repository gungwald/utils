#!/bin/sh

# Avoid long options, like --tmpdir for mktemp because they are not supported
# on UNIX and BSD.

# Locate relevant directories.
THIS_SCRIPT=`basename "$0" .sh`
SCRIPT_DIR=`dirname "$0"` && [ "$SCRIPT_DIR" = "." ] && SCRIPT_DIR=`pwd`
SCRIPT_FULL_NAME="$THIS_SCRIPT/$SCRIPT_DIR"
PARENT_DIR=`dirname "$SCRIPT_DIR"`
LIB_DIR="$PARENT_DIR"/lib
APP_JAR="$LIB_DIR/$THIS_SCRIPT".jar
RESOURCES_DIR="$PARENT_DIR"/resources
CLASSES_DIR="$PARENT_DIR"/classes
MAIN_CLASS=com.alteredmechanism.notepad.Notepad
CLASS_PATH="$CLASSES_DIR:$RESOURCES_DIR"
OS=`uname -s`

# $1 - Command basename
commandExists()
{
    # The "which" command does not return 1 on failure in OSX 10.4.11.
    # So "type" must be used instead.
    type "$1" > /dev/null
}

displayErrorOnMac()
{
	# Tell the background process SystemUIServer to display the dialog.
    osascript <<-EOF
		tell application "SystemUIServer"
			activate
			display dialog "$*" buttons {"OK"} with title "$TITLE"
		end tell
		activate application (path to frontmost application as text)
EOF
}

displayError()
{
    TITLE="ERROR in Program: $SCRIPT_FULL_NAME"
    if [ "`uname -s`" = "Darwin" ]
    then
        # This needs to be tried first because OS X could have xterm but it 
        # won't get displayed if the X Windows System isn't running...
    	displayErrorOnMac $*
    elif commandExists zenity
    then
    	zenity --text-info --title="$TITLE" --window-icon=error --text="$*"
    elif commandExists kdialog 
    then
    	kdialog --title "$TITLE" --text "$*"
    elif commandExists Xdialog
    then
    	Xdialog --title="$TITLE" --screen-center --no-cancel --text "$*"
    elif commandExists xmessage
    then
    	# xmessage seems to automatically handle setting the width and height
    	# properly. It's really the best of these programs... :-)
    	xmessage -fg red -center -default okay -title "$TITLE" $*
    elif commandExists xterm
    then
        xterm -title "$TITLE" -e "echo $* ; echo Press Enter to continue. ; read LINE"
    else
        echo $TITLE
        cat "$*"
    fi
}

displayErrorFile()
{
    PROGRAM_NAME=$1
    ERROR_FILE=$2
    TITLE="ERROR in Program: $PROGRAM_NAME"
    WIDTH=900
    HEIGHT=480
    if [ "`uname -s`" = "Darwin" ]
    then
        # This needs to be tried first because OS X could have xterm but it 
        # won't get displayed if the X Windows System isn't running...
        displayErrorOnMac `cat "$ERROR_FILE"`
    elif commandExists zenity
    then
    	zenity --text-info --height=$HEIGHT --width=$WIDTH --title="$TITLE" \
    		--no-wrap --window-icon=error --filename="$ERROR_FILE"
    elif commandExists kdialog 
    then
    	kdialog --title "$TITLE" --textbox "$ERROR_FILE" \
    		--geometry $WIDTHx$HEIGHT
    elif commandExists Xdialog
    then
    	Xdialog --title="$TITLE" --screen-center --no-cancel \
    		--textbox "$ERROR_FILE" $HEIGHT $WIDTH
    elif commandExists xmessage
    then
    	# xmessage seems to automatically handle setting the width and height
    	# properly. It's really the best of these programs... :-)
    	xmessage -fg red -center -default okay -title "$TITLE" \
    		-file "$ERROR_FILE"
    elif commandExists xterm
    then
        xterm -title "$TITLE" \
            -e "cat $ERROR_FILE ; echo Press Enter to continue. ; read LINE"
    else
        echo $TITLE
        cat "$ERROR_FILE"
    fi
}

# Setup fifo so that we can use 'tee' to send stderr to both the console
# and a file. The file will be used to display a window on the desktop
# with the errors it contains after the program exits. This will allow
# a user without visibility to the stderr output in a terminal to see
# any errors.
duplicateStdErr()
{
    TEMP_DIR=${TMPDIR:-/tmp}
    # The mktemp command is the way it is for compatibility with BSD systems
    # like Mac OS X 10.4.11. Don't change without testing.
    STDERR_FILE=`mktemp "$TEMP_DIR"/"$THIS_SCRIPT".stderr.XXXXXXXXXX`
    STDERR_FIFO=`mktemp -u "$TEMP_DIR"/"$THIS_SCRIPT".fifo.XXXXXXXXXX`
    mkfifo "$STDERR_FIFO"
    trap 'rm "$STDERR_FIFO" "$STDERR_FILE"' EXIT
    tee -a "$STDERR_FILE" < "$STDERR_FIFO" >&2 &
}

findJava()
{
    # L is for local variable
    unset L_JAVA_TEST
    unset L_JAVA
    
    if [ -n "$JAVA_HOME" ]
    then
    	L_JAVA_TEST="$JAVA_HOME"/bin/java
    	if [ -e "$L_JAVA_TEXT" ]
    	then
            if [ -x "$L_JAVA_TEST" ]
            then
                L_JAVA="$L_JAVA_TEST"
            else
                displayError Java specified by JAVA_HOME is not executable: $L_JAVA_TEST
            fi
        else
            displayError Java specified by JAVA_HOME does not exist: $L_JAVA_TEST
        fi
    fi
    if [ -z "$L_JAVA" ]
    then
        if commandExists java
        then
            L_JAVA=java
        else
            displayError Java cannot be found in PATH: $PATH
            exit 1
        fi
    fi
    echo $L_JAVA
    
    unset L_JAVA_TEST
    unset L_JAVA
    
}

getJavaSpecVersion()
{
    # L is for local variable
    L_JAVA="$1"
    L_VERSION=`"$L_JAVA" -version 2>&1 | head -1 | cut -d ' ' -f 3 | tr -d '"' | cut -d . -f 1,2`
    echo $L_VERSION
}

handleOutOfMemoryError()
{
    displayError An OutOfMemoryError has occurred. The application will be closed.
    exit 1
}

JAVA=`findJava`
JAVA_SPEC_VERSION=`getJavaSpecVersion "$JAVA"`

# Set the icon for Mac.
if [ "$OS" = 'Darwin' ]
then
	MAC_DOCK_ICON=-Xdock:icon="$RESOURCES_DIR"/icons/notepad-64x64.png
else
	unset MAC_ICON
fi

# Run
duplicateStdErr
if [ -z "$MAC_DOCK_ICON" ]
then
    # -Xshare:on is critical but usually on by default...
    "$JAVA" -XX:OnOutOfMemoryError="handleOutOfMemoryError" -jar "$APP_JAR" "$@" 2> "$STDERR_FIFO"
    JAVA_EXIT_CODE=$?
else
    "$JAVA" "$MAC_DOCK_ICON" -jar "$APP_JAR" "$@" 2> "$STDERR_FIFO"
    JAVA_EXIT_CODE=$?
fi

# Check for non-empty file
if [ -s "$STDERR_FILE" ]
then
	displayErrorFile "$0" "$STDERR_FILE"
elif [ $JAVA_EXIT_CODE -ne 0 ]
then
	cat > "$STDERR_FILE" <<-EOF
The program returned an exit code of $JAVA_EXIT_CODE, which is a failure code.
But it did not produce an error message on the standard error stream.
It is possible that it wrote an error message to the standard output stream,
but that has not been captured. Try running the program from the command line
to get the error message. This is the command to run:
$0 "$@"
EOF
	displayErrorFile "$0" "$STDERR_FILE"
fi
